rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userIdRule} {
      allow read, write: if request.auth != null && request.auth.uid == userIdRule;
    }

    match /households/{householdId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (request.auth.uid in resource.data.members || resource.data.ownerId == request.auth.uid || (resource.data.pendingInvites != null && resource.data.pendingInvites.keys().size() > 0));
      allow list: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

      allow update: if request.auth != null && (
        // Condição 1: Proprietário pode fazer qualquer atualização.
        resource.data.ownerId == request.auth.uid ||

        // Condição 2: Usuário aceitando seu próprio convite
        (
          request.resource.data.members[request.auth.uid] != null &&
          !(request.auth.uid in resource.data.members) &&
          resource.data.pendingInvites != null &&
          resource.data.pendingInvites[request.auth.uid.replace(/\./g, '_')] != null &&
          request.resource.data.pendingInvites[request.auth.uid.replace(/\./g, '_')] == null &&
          request.resource.data.ownerId == resource.data.ownerId &&
          request.resource.data.name == resource.data.name
          // Adicione aqui outros campos que não devem ser alterados ao aceitar convite
          // Para maior segurança, verifique se outros campos não foram alterados:
          // Ex: resource.data.someOtherField == request.resource.data.someOtherField
        ) ||

        // Condição 3: Usuário não-proprietário saindo da família
        (
          request.auth.uid in resource.data.members &&
          resource.data.ownerId != request.auth.uid &&
          request.resource.data.members[request.auth.uid] == null &&
          resource.data.members[request.auth.uid] != null &&
          request.resource.data.members.keys().size() == resource.data.members.keys().size() - 1 &&
          request.resource.data.ownerId == resource.data.ownerId &&
          request.resource.data.name == resource.data.name &&
          ((resource.data.pendingInvites == null && request.resource.data.pendingInvites == null) ||
           (resource.data.pendingInvites != null && request.resource.data.pendingInvites != null &&
            resource.data.pendingInvites.keys().size() == request.resource.data.pendingInvites.keys().size()))
          // Adicione aqui outros campos que não devem ser alterados ao sair da família
        )
      );

      match /transactions/{transactionId} {
        allow read, write, create, delete: if request.auth != null && get(/databases/$(database)/documents/households/$(householdId)).data.members[request.auth.uid] != null;
      }

      match /investments/{investmentId} {
        allow read, write, create, delete: if request.auth != null && get(/databases/$(database)/documents/households/$(householdId)).data.members[request.auth.uid] != null;
        match /entries/{entryId} {
          allow read, write, create, delete: if request.auth != null && get(/databases/$(database)/documents/households/$(householdId)).data.members[request.auth.uid] != null;
        }
      }
    }

    // New rules for root-level investments collection
    match /investments/{investmentId} {
      allow read, delete: if request.auth.uid == resource.data.user_id;

      allow create: if request.auth.uid != null
                    && request.resource.data.user_id == request.auth.uid
                    && request.resource.data.investment_name is string && request.resource.data.investment_name != ''
                    && request.resource.data.investment_type is string && request.resource.data.investment_type in ['Ação', 'FII', 'ETF', 'Renda Fixa', 'Criptomoeda', 'Outros']
                    && request.resource.data.institution is string && request.resource.data.institution != ''
                    && request.resource.data.acquisition_date is timestamp
                    && request.resource.data.total_quantity is number && request.resource.data.total_quantity >= 0
                    && request.resource.data.current_unit_price is number && request.resource.data.current_unit_price >= 0
                    && request.resource.data.currency is string && request.resource.data.currency in ['BRL', 'USD', 'EUR']
                    && request.resource.data.status is string && request.resource.data.status in ['Ativo', 'Vendido/Resgatado', 'Vencido'];

      allow update: if request.auth.uid == resource.data.user_id
                    && request.resource.data.user_id == resource.data.user_id // User ID cannot be changed
                    && request.resource.data.investment_name is string && request.resource.data.investment_name != ''
                    && request.resource.data.investment_type is string && request.resource.data.investment_type in ['Ação', 'FII', 'ETF', 'Renda Fixa', 'Criptomoeda', 'Outros']
                    && request.resource.data.institution is string && request.resource.data.institution != ''
                    && request.resource.data.acquisition_date is timestamp
                    && request.resource.data.total_quantity is number && request.resource.data.total_quantity >= 0
                    && request.resource.data.current_unit_price is number && request.resource.data.current_unit_price >= 0
                    && request.resource.data.currency is string && request.resource.data.currency in ['BRL', 'USD', 'EUR']
                    && request.resource.data.status is string && request.resource.data.status in ['Ativo', 'Vendido/Resgatado', 'Vencido'];
    }

    // New rules for root-level transactions collection
    match /transactions/{transactionId} {
      allow read, delete: if request.auth.uid == resource.data.user_id;

      allow create: if request.auth.uid != null
                    && request.resource.data.user_id == request.auth.uid
                    && request.resource.data.investment_id_fk is string && request.resource.data.investment_id_fk != ''
                    && request.resource.data.transaction_type is string && request.resource.data.transaction_type in ['Compra', 'Venda', 'Provento', 'Outros']
                    && request.resource.data.transaction_date is timestamp
                    && request.resource.data.quantity_transacted is number
                    && request.resource.data.price_per_unit_transacted is number && request.resource.data.price_per_unit_transacted >= 0;

      allow update: if request.auth.uid == resource.data.user_id
                    && request.resource.data.user_id == resource.data.user_id // User ID cannot be changed
                    && request.resource.data.investment_id_fk == resource.data.investment_id_fk // FK should not change
                    && request.resource.data.transaction_type is string && request.resource.data.transaction_type in ['Compra', 'Venda', 'Provento', 'Outros']
                    && request.resource.data.transaction_date is timestamp
                    && request.resource.data.quantity_transacted is number
                    && request.resource.data.price_per_unit_transacted is number && request.resource.data.price_per_unit_transacted >= 0;
    }
  }
}